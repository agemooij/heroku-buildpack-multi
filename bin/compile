#!/usr/bin/env bash

echo "=====> Building to: $1"
echo "=====> Caching to: $2"

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

while read buildpack subdir; do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  echo "=====> Raw buildpack url: ${buildpack}"
  echo "=====> Optional sub directory: ${subdir}"

  if [ "$subdir" != "" ]; then
    # TDO: detect whether the subdir exists and fail hard if it doesn't
    echo "=====> Building project from subdirectory: $subdir"
  fi

  url=${buildpack%#*}
  branch=${buildpack#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1/$subdir)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"

      $dir/bin/compile $1/$subdir $2

      if [ $? != 0 ]; then
        echo "=====> Compile failed..."
        exit 1
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1/$subdir > $1/last_pack_release.out
      fi
    fi
  fi
done < $1/.buildpacks

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework $framework:" | indent
  cat $1/last_pack_release.out | indent
fi
